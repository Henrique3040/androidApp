package com.example.cafefinder.data.database

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import com.example.cafefinder.data.model.Locatie
import com.example.cafefinder.data.repository.LocatieDao

/**
 * The Room database for storing locatie data locally.
 * This database is configured to work with the Locatie entity and provides access to the [LocatieDao].
 */
@Database(entities = [Locatie::class], version = 1, exportSchema = false)
abstract class AppDatabase : RoomDatabase() {


    /**
     * Abstract method to get the DAO (Data Access Object) for performing database operations on the Locatie table.
     * @return The [LocatieDao] implementation generated by Room.
     */
    abstract fun locatieDao(): LocatieDao

    companion object {
        // Volatile variable to ensure visibility of changes across threads
        @Volatile private var INSTANCE: AppDatabase? = null

        /**
         * Provides the singleton instance of the database.
         * Ensures that only one instance of the database is created and reused across the application.
         *
         * @param context The application context.
         * @return The singleton instance of [AppDatabase].
         */
        fun getDatabase(context: Context): AppDatabase {
            // Use the existing instance if available, otherwise create a new one in a synchronized block
            return INSTANCE ?: synchronized(this) {
                // Build the Room database instance with the application context and database name
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "locaties_database" // The name of the SQLite database file
                ).build()
                INSTANCE = instance // Cache the created instance for future use
                instance // Return the created instance
            }
        }
    }
}